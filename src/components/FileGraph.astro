---
import type { BasePageInfo, PageInfo, PageLink } from "../utils/pageInfo";

interface SingleFileProps {
    centralFile: BasePageInfo,
    backlinks: BasePageInfo[],
    forwardlinks: PageLink[],
}

interface MultiFileProps {
    files: PageInfo[],
}

type FileGraphProps = (SingleFileProps | MultiFileProps) & { elementStyle: string };

const props = Astro.props as FileGraphProps;

const elementStyle = props.elementStyle;

let centralFile: BasePageInfo | undefined = undefined;
let backlinks: BasePageInfo[] = [];
let forwardlinks: PageLink[] = [];
let files: PageInfo[] = [];

if ("centralFile" in props) {
    centralFile = props.centralFile;
    centralFile.name = centralFile.name.replace(/^(blog|notes|posts) - /g, "");

    forwardlinks = props.forwardlinks.map<PageLink>(forwardlink => ({
        slug: forwardlink.slug,
        name: forwardlink.name.replace(/^(blog|notes|posts) - /g, ""),
        collection: forwardlink.collection,
    }));
    backlinks = props.backlinks.map<BasePageInfo>(backlink => ({
        slug: backlink.slug,
        name: backlink.name.replace(/^(blog|notes|posts) - /g, ""),
        collection: backlink.collection,
    })).filter(backlink => forwardlinks.findIndex(forwardlink => forwardlink.slug === backlink.slug) === -1);
} else
    files = props.files.map<PageInfo>(file => ({
        name: file.name.replace(/^(blog|notes|posts) - /g, ""),
        slug: file.slug,
        collection: file.collection,
        internalLinks: file.internalLinks.map<PageLink>(link => ({
            name: link.name.replace(/^(blog|notes|posts) - /g, ""),
            slug: link.slug,
            collection: link.collection,
        })),
    }));
---

<file-graph
    style={elementStyle}
    data-central-file={JSON.stringify(centralFile)}
    data-backlinks={JSON.stringify(backlinks)}
    data-forwardlinks={JSON.stringify(forwardlinks)}
    data-files={JSON.stringify(files)}
>
    {(forwardlinks.some(link => !link.collection) || files.some(link => !link.collection)) && <div class="filegraph-empty-link-toggle">Hide non-existent pages</div>}
</file-graph>

<script>
    import * as d3 from "d3";
    import type { BasePageInfo, PageInfo, PageLink } from "../utils/pageInfo";

    interface noteNode extends d3.SimulationNodeDatum {
        id: string;
        label: string;
        group: string | undefined;
    }

    const cssStyle = getComputedStyle(document.body);
    const colours = {
        primary: cssStyle.getPropertyValue("--primary"),
        secondary: cssStyle.getPropertyValue("--secondary"),
        neutral: cssStyle.getPropertyValue("--neutral"),
        "dark-neutral": cssStyle.getPropertyValue("--dark-neutral"),
        blog: cssStyle.getPropertyValue("--blog"),
        notes: cssStyle.getPropertyValue("--notes"),
        posts: cssStyle.getPropertyValue("--posts"),
    };

    class FileGraph extends HTMLElement {

        connectedCallback () {

            const centralFile: BasePageInfo | undefined = JSON.parse(this.getAttribute("data-central-file")!);
            const backlinks: BasePageInfo[] = JSON.parse(this.getAttribute("data-backlinks")!);
            const forwardlinks: PageLink[] = JSON.parse(this.getAttribute("data-forwardlinks")!);
            const files: PageInfo[] = JSON.parse(this.getAttribute("data-files")!);
            const emptyLinkToggle = this.querySelector(".filegraph-empty-link-toggle");

            // Make responsive styling reactive instead of an early exit
            const { style } = this;
            const originalPosition = style.position;
            const originalTop = style.top;
            const originalLeft = style.left;
            const originalRight = style.right;
            const originalBottom = style.bottom;
            function updateResponsiveStyles () {
                if (window.innerWidth < 1150 && !centralFile) // Hide toggle on small devices if there is no central file
                    emptyLinkToggle?.setAttribute("data-hidden", "true");
                
                if (window.innerWidth < 1150) { // Remove position styling if centralFile is present on small devices
                    style.position = "initial";
                    style.top = "initial";
                    style.left = "initial";
                    style.right = "initial";
                    style.bottom = "initial";
                } else {
                    emptyLinkToggle?.removeAttribute("data-hidden");
                    style.position = originalPosition;
                    style.top = originalTop;
                    style.left = originalLeft;
                    style.right = originalRight;
                    style.bottom = originalBottom;
                }
            }
            updateResponsiveStyles();

            // Make nodes and links
            let nodes: noteNode[] = [];
            let links: { source: string | noteNode; target: string | noteNode; }[] = [];
            let width = centralFile ? Math.min(window.innerWidth, 450) : window.innerWidth - 720;
            let height = centralFile ? Math.min(window.innerWidth, 450) : window.innerWidth - 720;

            if (centralFile) {
                nodes = [
                    { id: centralFile.slug, label: centralFile.name, group: "main" },
                    ...forwardlinks.map(forwardlink => ({ id: forwardlink.slug, label: forwardlink.name, group: forwardlink.collection })),
                    ...backlinks.map(backlink => ({ id: backlink.slug, label: backlink.name, group: backlink.collection })),
                ]; 
                links = [
                    ...forwardlinks.map(forwardlink => ({ source: centralFile.slug, target: forwardlink.slug })),
                    ...backlinks.map(backlink => ({ source: backlink.slug, target: centralFile.slug })),
                ];
            } else
                for (const file of files) {
                    if (!nodes.find(node => node.id === file.slug))
                        nodes.push({ id: file.slug, label: file.name, group: file.collection });
                    for (const link of file.internalLinks) {
                        if (!nodes.find(node => node.id === link.slug))
                            nodes.push({ id: link.slug, label: link.name, group: link.collection });
                        links.push({ source: file.slug, target: link.slug });
                    }
                }

            // Set up the Canvas
            const canvas = d3.select(this).append("canvas")
                .attr("width", width)
                .attr("height", height)
                .node()!;
            const context = canvas.getContext("2d")!;

            // Consts to store all nodes and links
            const allNodes = nodes;
            const allLinks = links;

            // Initialize the simulation
            const simulation = d3.forceSimulation(nodes)
                .force("link", d3.forceLink(links)
                    .id(d => (d as noteNode).id)
                    .distance(() => Math.random() * 70 + 120)
                )
                .force("charge", d3.forceManyBody())
                .force("center", d3.forceCenter(width / 2, height / 2))
                .on("tick", ticked);

            // Handle dragging
            d3.select(canvas)
                .call(d3.drag()
                    .container(canvas)
                    .subject(dragsubject)
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended) as any);

            // Handle zooming
            let transform = d3.zoomIdentity;
            const zoom = d3.zoom<HTMLCanvasElement, unknown>()
                .scaleExtent([0.5, 5])
                .on("zoom", (event) => {
                    transform = event.transform;
                    ticked();
                })
                // Only let zoom start if NOT clicking on a node:
                .filter((event) => {
                    // For mouse events, check if a node is nearby (using our dragsubject)
                    if (event.type === "mousedown" || event.type === "touchstart") {
                        return dragsubject(event) == null;
                    }
                    return true;
                });

            d3.select(canvas).call(zoom);

            // Draw the graph
            function ticked () {
                context.save();
                context.clearRect(0, 0, width, height);
                context.translate(transform.x, transform.y);
                context.scale(transform.k, transform.k);

                // Draw links
                context.beginPath();
                context.strokeStyle = "rgba(124, 124, 124, 0.6)";
                context.lineWidth = 4 / transform.k;  // adjust for zoom
                links.forEach(drawLink);
                context.stroke();

                // Draw nodes and labels
                nodes.forEach(drawNode);
                nodes.forEach(drawLabel);
                context.restore();
            }

            function drawLink (d: any) {
                context.moveTo(d.source.x, d.source.y);
                context.lineTo(d.target.x, d.target.y);
            }

            function drawNode (d: any) {
                context.beginPath();
                context.fillStyle = getNodeColor(d);
                context.arc(d.x, d.y, 10, 0, 2 * Math.PI);
                context.fill();
                context.strokeStyle = colours["dark-neutral"];
                context.lineWidth = 3 / transform.k;  // adjust for zoom
                context.stroke();
            }

            function drawLabel (d: any) {
                context.fillStyle = getNodeColor(d);
                context.font = "16px Inconsolata";
                const textLength = context.measureText(d.label).width;
                context.fillText(d.label, d.x - textLength / 2, d.y + 25);
            }

            function getNodeColor (d: any) {
                return !d.group
                    ? colours.neutral
                    : d.group === "main"
                        ? colours.primary
                        : colours[d.group as "blog" | "notes" | "posts"];
            }

            function dragsubject (event: any) {
                const [sx, sy] = transform.invert(d3.pointer(event, canvas));
                let subject: noteNode | null = null;
                let minDistance = Infinity;
                for (const d of nodes) {
                    const dx = sx - d.x!;
                    const dy = sy - d.y!;
                    const dist = dx * dx + dy * dy;
                    if (dist < 100 && dist < minDistance) {
                        minDistance = dist;
                        subject = d;
                    }
                }
                return subject;
            }

            function dragstarted (event: any) {
                const subject = event.subject;
                if (subject) {
                    // Stop propagation so the zoom doesn’t kick in too
                    event.sourceEvent.stopPropagation();
                    if (!event.active)
                        simulation.alphaTarget(0.3).restart();
                    const [sx, sy] = transform.invert([event.x, event.y]);
                    // Store the offset between the node's current position and the pointer position
                    subject.offsetX = subject.x - sx;
                    subject.offsetY = subject.y - sy;
                    subject.fx = subject.x;
                    subject.fy = subject.y;
                }
            }

            function dragged (event: any) {
                const subject = event.subject;
                if (subject) {
                    const [sx, sy] = transform.invert([event.x, event.y]);
                    subject.fx = sx + subject.offsetX;
                    subject.fy = sy + subject.offsetY;
                }
            }

            function dragended (event: any) {
                const subject = event.subject;
                if (subject) {
                    if (!event.active)
                        simulation.alphaTarget(0);
                    subject.fx = null;
                    subject.fy = null;
                    delete subject.offsetX;
                    delete subject.offsetY;
                }
            }

            // Handle click events
            canvas.addEventListener("click", function(event) {
                const [x, y] = transform.invert(d3.pointer(event, canvas));
                for (const d of nodes) {
                    const dx = x - d.x!;
                    const dy = y - d.y!;
                    if (dx * dx + dy * dy < 100) { // 10px radius (in simulation coords, not screen coords)
                        if (d.group === "main" || !d.group) return;
                        window.location.href = d.id;
                        break;
                    }
                }
            });

            // Change cursor to pointer when mouse is over nodes
            canvas.addEventListener("mousemove", function(event) {
                const [x, y] = transform.invert(d3.pointer(event, canvas));
                for (const d of nodes) {
                    const dx = x - d.x!;
                    const dy = y - d.y!;
                    if (dx * dx + dy * dy < 100) { // 10px radius (in simulation coords, not screen coords)
                        if (d.group === "main" || !d.group) continue;
                        canvas.style.cursor = "pointer";
                        return;
                    }
                }
                canvas.style.cursor = "default";
            });

            // Resize canvas on window resize and update responsive styles
            window.addEventListener("resize", () => {
                if (window.innerWidth < 1150) {
                    width = Math.min(window.innerWidth, 450);
                    height = Math.min(window.innerWidth, 450);
                } else {
                    width = Math.max(window.innerWidth - 720, 450);
                    height = Math.max(window.innerWidth - 720, 450);
                }
                canvas.width = width;
                canvas.height = height;
                simulation.force("center", d3.forceCenter(width / 2, height / 2));
                simulation.alpha(1).restart();
                ticked();
                updateResponsiveStyles();
            });

            // Toggle visibility of non-existent pages
            let showNonExistent = true;

            emptyLinkToggle?.addEventListener("click", (e) => {
                e.stopPropagation();
                showNonExistent = !showNonExistent;
                emptyLinkToggle.textContent = showNonExistent
                    ? "Hide non-existent pages"
                    : "Show non-existent pages";
                updateVisibility();
                simulation.nodes(nodes);
                simulation.force(
                    "link",
                    d3.forceLink(links)
                        .id(d => (d as noteNode).id)
                        .distance(() => Math.random() * 70 + 120)
                );
                simulation.alpha(1).restart();
            });

            function updateVisibility () {
                if (showNonExistent) {
                    nodes = allNodes;
                    links = allLinks;
                } else {
                    nodes = allNodes.filter(d => d.group);
                    const nodeIds = new Set(nodes.map(d => d.id));
                    links = allLinks.filter(
                        d => nodeIds.has((d.source as noteNode).id) && nodeIds.has((d.target as noteNode).id)
                    );
                }
            }
        }
    }

    customElements.define("file-graph", FileGraph);
</script>

<style>
    .filegraph-empty-link-toggle {
        width: 100%;
        text-align: center;
        cursor: pointer;
    }

    .filegraph-empty-link-toggle[data-hidden="true"] {
        display: none;
    }
</style>