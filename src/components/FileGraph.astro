---
import type { BasePageInfo, PageInfo, PageLink } from "../utils/pageInfo";

interface SingleFileProps {
    centralFile: BasePageInfo,
    backlinks: BasePageInfo[],
    forwardlinks: PageLink[],
}

interface MultiFileProps {
    files: PageInfo[],
}

type FileGraphProps = (SingleFileProps | MultiFileProps) & { elementStyle: string };

const props = Astro.props as FileGraphProps;

const elementStyle = props.elementStyle;

let centralFile: BasePageInfo | undefined = undefined;
let backlinks: BasePageInfo[] = [];
let forwardlinks: PageLink[] = [];
let files: PageInfo[] = [];

if ("centralFile" in props) {
    centralFile = props.centralFile;
    centralFile.name = centralFile.name.replace(/^(blog|notes|posts) - /g, "");

    forwardlinks = props.forwardlinks.map<PageLink>(forwardlink => ({
        slug: forwardlink.slug.split("/").pop()!,
        name: forwardlink.name.replace(/^(blog|notes|posts) - /g, ""),
        collection: forwardlink.collection,
    }));
    backlinks = props.backlinks.map<BasePageInfo>(backlink => ({
        slug: backlink.slug.split("/").pop()!,
        name: backlink.name.replace(/^(blog|notes|posts) - /g, ""),
        collection: backlink.collection,
    })).filter(backlink => forwardlinks.findIndex(forwardlink => forwardlink.slug === backlink.slug) === -1);
} else
    files = props.files.map<PageInfo>(file => ({
        name: file.name.replace(/^(blog|notes|posts) - /g, ""),
        slug: file.slug,
        collection: file.collection,
        internalLinks: file.internalLinks.map<PageLink>(link => ({
            name: link.name.replace(/^(blog|notes|posts) - /g, ""),
            slug: link.slug,
            collection: link.collection,
        })),
    }));
---

<file-graph
    style={elementStyle}
    data-central-file={JSON.stringify(centralFile)}
    data-backlinks={JSON.stringify(backlinks)}
    data-forwardlinks={JSON.stringify(forwardlinks)}
    data-files={JSON.stringify(files)}
>
    {(forwardlinks.some(link => !link.collection) || files.some(link => !link.collection)) && <div class="filegraph-empty-link-toggle">Hide non-existent pages</div>}
</file-graph>

<script>
    import * as d3 from "d3";
    import type { BasePageInfo, PageInfo, PageLink } from "../utils/pageInfo";

    interface noteNode extends d3.SimulationNodeDatum {
        id: string;
        label: string;
        group: string | undefined;
    }

    const cssStyle = getComputedStyle(document.body);
    const colours = {
        primary: cssStyle.getPropertyValue("--primary"),
        secondary: cssStyle.getPropertyValue("--secondary"),
        neutral: cssStyle.getPropertyValue("--neutral"),
        "dark-neutral": cssStyle.getPropertyValue("--dark-neutral"),
        blog: cssStyle.getPropertyValue("--blog"),
        notes: cssStyle.getPropertyValue("--notes"),
        posts: cssStyle.getPropertyValue("--posts"),
    };

    class FileGraph extends HTMLElement {

        connectedCallback () {

            const centralFile: BasePageInfo | undefined = JSON.parse(this.getAttribute("data-central-file")!);
            const backlinks: BasePageInfo[] = JSON.parse(this.getAttribute("data-backlinks")!);
            const forwardlinks: PageLink[] = JSON.parse(this.getAttribute("data-forwardlinks")!);
            const files: PageInfo[] = JSON.parse(this.getAttribute("data-files")!);
            const emptyLinkToggle = this.querySelector(".filegraph-empty-link-toggle");

            if (window.innerWidth < 1150 && !centralFile) {
                emptyLinkToggle?.remove();
                return;
            } else if (window.innerWidth < 860 && centralFile) { // remove all position styling if centralFile is present
                this.style.removeProperty("position");
                this.style.removeProperty("top");
                this.style.removeProperty("left");
                this.style.removeProperty("right");
                this.style.removeProperty("bottom");
            }

            // Make nodes and links
            let nodes: noteNode[] = [];
            let links: { source: string | noteNode; target: string | noteNode; }[] = [];
            let width = window.innerWidth - 720;
            let height = window.innerWidth - 720;

            if (centralFile) {
                width = Math.min(window.innerWidth, 450);
                height = Math.min(window.innerWidth, 450);
                nodes = [
                    { id: centralFile.slug, label: centralFile.name, group: "main" },
                    ...forwardlinks.map(forwardlink => ({ id: forwardlink.slug, label: forwardlink.name, group: forwardlink.collection })),
                    ...backlinks.map(backlink => ({ id: backlink.slug, label: backlink.name, group: backlink.collection })),
                ]; 
                links = [
                    ...forwardlinks.map(forwardlink => ({ source: centralFile.slug, target: forwardlink.slug })),
                    ...backlinks.map(backlink => ({ source: backlink.slug, target: centralFile.slug })),
                ];
            } else
                for (const file of files) {
                    if (!nodes.find(node => node.id === file.slug))
                        nodes.push({ id: file.slug, label: file.name, group: file.collection });
                    for (const link of file.internalLinks) {
                        if (!nodes.find(node => node.id === link.slug))
                            nodes.push({ id: link.slug, label: link.name, group: link.collection });
                        links.push({ source: file.slug, target: link.slug });
                    }
                }

            // Set up the Canvas
            const canvas = d3.select(this).append("canvas")
                .attr("width", width)
                .attr("height", height)
                .node()!;

            const context = canvas.getContext("2d")!;

            // Variables to store all nodes and links
            const allNodes = nodes;
            const allLinks = links;

            // Initialize the simulation
            const simulation = d3.forceSimulation(nodes)
                .force("link", d3.forceLink(links)
                    .id(d => (d as noteNode).id)
                    .distance(() => Math.random() * 70 + 120)
                )
                .force("charge", d3.forceManyBody())
                .force("center", d3.forceCenter(width / 2, height / 2))
                .on("tick", ticked);

            // Handle dragging
            d3.select(canvas)
                .call(d3.drag()
                    .container(canvas)
                    .subject(dragsubject)
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended) as any);

            function ticked () {
                context.clearRect(0, 0, width, height);

                // Draw links
                context.beginPath();
                context.strokeStyle = "rgba(124, 124, 124, 0.6)";
                context.lineWidth = 4;
                links.forEach(drawLink);
                context.stroke();

                // Draw nodes and labels
                nodes.forEach(drawNode);
                nodes.forEach(drawLabel);
            }

            function drawLink (d: any) {
                context.moveTo(d.source.x, d.source.y);
                context.lineTo(d.target.x, d.target.y);
            }

            function drawNode (d: any) {
                context.beginPath();
                context.fillStyle = getNodeColor(d);
                context.arc(d.x, d.y, 10, 0, 2 * Math.PI);
                context.fill();
                context.strokeStyle = colours["dark-neutral"];
                context.lineWidth = 3;
                context.stroke();
            }

            function drawLabel (d: any) {
                context.fillStyle = getNodeColor(d);
                context.font = "16px Inconsolata";
                const textLength = context.measureText(d.label).width;
                context.fillText(d.label, d.x - textLength / 2, d.y + 25);
            }

            function getNodeColor (d: any) {
                return !d.group
                    ? colours.neutral
                    : d.group === "main"
                        ? colours.primary
                        : colours[d.group as "blog" | "notes" | "posts"];
            }

            function dragsubject (event: any) {
                const [x, y] = d3.pointer(event, canvas);
                let subject = null;
                let minDistance = Infinity;
                for (const d of nodes) {
                    const dx = x - d.x!;
                    const dy = y - d.y!;
                    const distance = dx * dx + dy * dy;
                    if (distance < minDistance && distance < 100) {
                        minDistance = distance;
                        subject = d;
                    }
                }
                return subject;
            }

            function dragstarted (event: any) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
            }

            function dragged (event: any) {
                event.subject.fx = event.x;
                event.subject.fy = event.y;
            }

            function dragended (event: any) {
                if (!event.active) simulation.alphaTarget(0);
                event.subject.fx = null;
                event.subject.fy = null;
            }

            // Handle click events
            canvas.addEventListener("click", function(event) {
                const [x, y] = d3.pointer(event, canvas);
                for (const d of nodes) {
                    const dx = x - d.x!;
                    const dy = y - d.y!;
                    if (dx * dx + dy * dy < 100) { // 10px radius
                        if (d.group === "main" || !d.group) return;
                        window.location.href = d.id;
                        break;
                    }
                }
            });

            // Change cursor to pointer when mouse is over nodes
            canvas.addEventListener("mousemove", function(event) {
                const [x, y] = d3.pointer(event, canvas);
                for (const d of nodes) {
                    const dx = x - d.x!;
                    const dy = y - d.y!;
                    if (dx * dx + dy * dy < 100) { // 10px radius
                        if (d.group === "main" || !d.group) continue;
                        canvas.style.cursor = "pointer";
                        return;
                    }
                }
                canvas.style.cursor = "default";
            });

            // // Zoom in and out at the mouse position
            // let zoom = 1;
            // canvas.addEventListener("wheel", function(event) {
            //     event.preventDefault();
            //     const [x, y] = d3.pointer(event, canvas);
            //     const delta = event.deltaY;
            //     zoom = delta > 0 ? zoom * 0.9 : zoom * 1.1;
            //     simulation.force
            // });

            // Toggle visibility of non-existent pages
            let showNonExistent = true;

            emptyLinkToggle?.addEventListener("click", (e) => {
                e.stopPropagation();
                showNonExistent = !showNonExistent;
                emptyLinkToggle.textContent = showNonExistent
                    ? "Hide non-existent pages"
                    : "Show non-existent pages";
                updateVisibility();
                simulation.nodes(nodes);
                simulation.force("link", d3.forceLink(links).id(d => (d as noteNode).id).distance(() => Math.random() * 70 + 120));
                simulation.alpha(1).restart();
            });

            function updateVisibility () {
                if (showNonExistent) {
                    nodes = allNodes;
                    links = allLinks;
                } else {
                    nodes = allNodes.filter(d => d.group);
                    const nodeIds = new Set(nodes.map(d => d.id));
                    links = allLinks.filter(
                        d => nodeIds.has((d.source as noteNode).id) && nodeIds.has((d.target as noteNode).id)
                    );
                }
            }
        }
    }

    customElements.define("file-graph", FileGraph);
</script>

<style>
    .filegraph-empty-link-toggle {
        width: 100%;
        text-align: center;
        cursor: pointer;
    }
</style>