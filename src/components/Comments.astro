---
interface Props {
  postID?: string;
}

let { postID } = Astro.props;

// Determine postID from URL if not provided as prop
if (!postID) {
    postID = Astro.url.pathname.replace(/(\/$|^\/)/, "");

    if (
        postID !== "me" &&
        postID !== "comments" &&
        postID.split("/").length < 2 &&
        ["blog", "posts"].includes(postID.split("/")[0]!)
    )
        throw new Error("Invalid post ID");

    if (postID === "comments")
        postID = "global";
}

// The client-side script handles fetching and displaying comments
---

<div class="comments-container" data-post-id={postID}>
    <h2>Comments</h2>
    <div class="comments-list" id="comments-list">
    <!-- Comments will be loaded here -->
    <div class="loading">Loading comments...</div>
    </div>

    <div class="comment-form-container">
        <h3>Leave a comment</h3>
        <form id="comment-form" class="comment-form">
            <div class="form-group">
                <label for="username">Name (optional)</label>
                <input
                    type="text"
                    id="username"
                    name="username"
                    placeholder="Anonymous"
                    maxlength="50"
                />
            </div>

            <div class="form-group">
                <label for="website">Website (optional)</label>
                <input
                    type="url"
                    id="website"
                    name="website"
                    placeholder="https://example.com"
                />
            </div>

            <div class="form-group">
                <label for="comment">Comment</label>
                <textarea id="comment" name="comment" required maxlength="4000" rows="4"
                ></textarea>
            </div>

            <input type="hidden" id="replyID" name="replyID" value="" />
            <input type="hidden" id="postID" name="postID" value={postID} />

            <div class="form-group owner-section" style="display: none;">
                <label for="password">Owner Password (if owner)</label>
                <input type="password" id="password" name="password" />
            </div>

            <div class="form-buttons">
                <button type="submit">Post Comment</button>
            </div>
        </form>

        <div id="reply-to-container" style="display: none;">
            <p>Replying to: <span id="reply-to-name"></span></p>
            <p id="reply-content"></p>
            <button type="button" id="cancel-reply">Cancel Reply</button>
        </div>
    </div>
</div>

<script>
document.addEventListener("astro:page-load", () => {
    interface Comment {
        ID: number;
        postID: string;
        timestamp: string;
        username: string | null;
        website: string | null;
        comment: string;
        isOwner: boolean;
        replyID: number | null;
        replies?: Comment[];
    }

    // Helper functions
    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        return date.toLocaleString("en-US", {
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
        });
    };

    const escapeHtml = (text: string) => {
        const element = document.createElement("div");
        element.textContent = text;
        return element.innerHTML;
    };

    // Get postID from the container
    const commentsContainer = document.querySelector(".comments-container") as HTMLElement | null;
    if (!commentsContainer) throw new Error("Comments container not found");

    const postID = commentsContainer.getAttribute("data-post-id");
    const commentsList = document.getElementById("comments-list") as HTMLElement | null;
    const commentForm = document.getElementById("comment-form") as HTMLFormElement | null;
    const replyToContainer = document.getElementById("reply-to-container") as HTMLElement | null;
    const replyToName = document.getElementById("reply-to-name") as HTMLElement | null;
    const replyContent = document.getElementById("reply-content") as HTMLElement | null;
    const replyIDInput = document.getElementById("replyID") as HTMLInputElement | null;
    const ownerSection = document.querySelector(".owner-section") as HTMLElement | null;
    const cancelReplyBtn = document.getElementById("cancel-reply") as HTMLButtonElement | null;
    if (
        !commentForm ||
        !replyToContainer ||
        !replyToName ||
        !replyContent ||
        !replyIDInput ||
        !ownerSection ||
        !cancelReplyBtn
    )
        throw new Error("One or more elements not found");

    // Load comments
    const loadComments = async () => {
        try {
        commentsList!.innerHTML =
        "<div class=\"loading\">Loading comments...</div>";

        const response = await fetch(
            `https://vinxis-comments.oykxf2.workers.dev?postID=${postID}`
        );
        const data = await response.json();

        if (!data.comments || data.comments.length === 0) {
        commentsList!.innerHTML =
            "<div class=\"no-comments\">No comments yet. Be the first to comment!</div>";
        return;
        }

        let commentsHtml = "";

        data.comments.forEach((comment: Comment) => {
            commentsHtml += renderComment(comment);

            // Add replies if any
            if (comment.replies && comment.replies.length > 0) {
                commentsHtml += "<div class=\"replies\">";
                comment.replies.forEach((reply) => {
                    commentsHtml += renderComment(reply, true);
                });
                commentsHtml += "</div>";
            }
        });

        commentsList!.innerHTML = commentsHtml;

        // Add event listeners to reply buttons
        document.querySelectorAll(".reply-button").forEach((button) => {
            button.addEventListener("click", handleReplyClick);
        });
        } catch (error) {
            console.error("Error loading comments:", error);
        commentsList!.innerHTML =
        "<div class=\"error\">Failed to load comments. Please try again later.</div>";
        }
    };

    // Render a single comment
    const renderComment = (comment: Comment, isReply = false) => {
        const username = comment.username ?? "Anonymous";
        const ownerTag = comment.isOwner
            ? "<span class=\"comment-owner\">[OWNER]</span>"
            : "";
        const websiteLink = comment.website
            ? `<a href="${escapeHtml(comment.website)}" target="_blank" rel="noopener noreferrer" class="comment-website">Website</a>`
            : "";
        const replyButton = isReply
            ? ""
            : `<button class="reply-button" data-id="${comment.ID}" data-name="${escapeHtml(username)}">Reply</button>`;

        return `
        <div class="comment ${isReply ? "reply" : ""}" id="comment-${comment.ID}">
        <div class="comment-header">
            <span class="comment-username">${escapeHtml(username)}</span>
            ${ownerTag}
            ${websiteLink}
            <span class="comment-timestamp">${formatDate(comment.timestamp)}</span>
        </div>
        <div class="comment-body">${escapeHtml(comment.comment)}</div>
        <div class="comment-actions">
            ${replyButton}
        </div>
        </div>
    `;
    };

    // Handle reply button click
    const handleReplyClick = (event: Event) => {
        const commentId = (event.currentTarget as HTMLButtonElement).getAttribute("data-id");
        const commentName = (event.currentTarget as HTMLButtonElement).getAttribute("data-name");
        if (!commentId || !commentName)
            return;

        replyIDInput.value = commentId;
        replyToName.textContent = commentName;
        replyContent.textContent = (event.currentTarget as HTMLButtonElement).closest(".comment")?.querySelector(".comment-body")?.textContent || "";
        replyToContainer.style.display = "block";

        // Scroll to comment form
        commentForm.scrollIntoView({ behavior: "smooth" });
        document.getElementById("comment")?.focus();
    };

    // Cancel reply
    cancelReplyBtn.addEventListener("click", () => {
        replyIDInput.value = "";
        replyToContainer.style.display = "none";
    });

    // If user types "vnxs", show owner section
    let pressedKeys = new Set<string>();
    document.addEventListener("keydown", (event) => {
        if (pressedKeys.has(event.key))
            return;
        if (event.key === "CapsLock")
            pressedKeys = new Set<string>();
        if (pressedKeys.has(event.key.toUpperCase()) || pressedKeys.has(event.key.toLowerCase())) {
            pressedKeys.delete(event.key.toUpperCase());
            pressedKeys.delete(event.key.toLowerCase());
        }
        pressedKeys.add(event.key);
        if (
            (pressedKeys.has("v") || pressedKeys.has("V")) &&
            (pressedKeys.has("n") || pressedKeys.has("N")) &&
            (pressedKeys.has("x") || pressedKeys.has("X")) &&
            (pressedKeys.has("s") || pressedKeys.has("S"))
        ) {
            ownerSection.style.display = "block";
            pressedKeys.clear();
        }
    });
    document.addEventListener("keyup", (event) => {
        pressedKeys.delete(event.key);
    });

    // Handle form submission
    commentForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const formData = new FormData(commentForm);
        const comment = formData.get("comment");

        if (!comment || comment.toString().trim() === "") {
            alert("Comment cannot be empty");
            return;
        }

        try {
            const submitBtn = commentForm.querySelector("button[type=\"submit\"]") as HTMLButtonElement | null;
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.textContent = "Posting...";
            }

            const payload = {
                postID,
                comment: comment.toString().trim(),
                username: formData.get("username") || null,
                website: formData.get("website") || null,
                replyID: formData.get("replyID") || null,
                password: formData.get("password") || null,
            };

            const response = await fetch(
                "https://vinxis-comments.oykxf2.workers.dev",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(payload),
                }
            );

            const result = await response.json();

            if (response.ok) {
                // Reset form
                commentForm.reset();
                replyIDInput.value = "";
                replyToContainer.style.display = "none";
                ownerSection.style.display = "none";

                // Reload comments
                await loadComments();

                // Scroll to the newly added comment if it's a reply
                if (payload.replyID) {
                    const parentComment = document.getElementById(
                        `comment-${payload.replyID}`
                    );
                    if (parentComment) {
                        parentComment.scrollIntoView({ behavior: "smooth" });
                    }
                }
            } else {
                alert(`Error: ${result.error || "Failed to post comment"}`);
            }
        } catch (error) {
            console.error("Error posting comment:", error);
            alert("Failed to post comment. Please try again later.");
        } finally {
            const submitBtn = commentForm.querySelector("button[type=\"submit\"]") as HTMLButtonElement | null;
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = "Post Comment";
            }
        }
    });

    // Load comments on page load
    loadComments()
        .then(() => {
            const loadingElement = commentsList!.querySelector(".loading");
            if (loadingElement) {
                loadingElement.remove();
            }
        })
        .catch((error) => {
            console.error("Error loading comments:", error);
            commentsList!.innerHTML =
                "<div class=\"error\">Failed to load comments. Please try again later.</div>";
        });
});
</script>

<style is:global>
  .comments-container {
    margin-top: 2rem;
  }

  .comments-list {
    margin-top: 1rem;
  }

  .comment {
    border-radius: 5px;
    padding: 1rem;
    margin-bottom: 1rem;
    background-color: var(--code-bg);
  }

  .comment.reply {
    margin-left: 2rem;
    border-left: 3px solid var(--secondary);
  }

  .replies {
    margin-top: 0.5rem;
    margin-left: 1rem;
  }

  .comment-header {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .comment-username {
    font-weight: bold;
  }

  .comment-owner {
    background-color: var(--secondary);
    color: white;
    padding: 0.1rem 0.3rem;
    border-radius: 4px;
    font-size: 0.8rem;
  }

  .comment-website {
    font-size: 0.8rem;
    color: var(--secondary);
  }

  .comment-timestamp {
    color: var(--neutral);
    font-size: 0.8rem;
    margin-left: auto;
  }

  .comment-body {
    margin-bottom: 0.5rem;
    white-space: pre-wrap;
    word-break: break-word;
  }

  .comment-actions {
    display: flex;
    justify-content: flex-end;
  }

  .loading, .error, .no-comments {
    padding: 1rem;
    text-align: center;
    color: var(--analogous1);
  }

  .error {
    color: var(--analogous2);
  }

  .comment-form-container {
    margin-top: 2rem;
  }

  .comment-form {
    margin-top: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
  }

  label {
    font-weight: 500;
  }

  .form-buttons {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
  }

  #reply-to-container {
    margin-top: 1rem;
    padding: 0.5rem;
    background-color: var(--code-bg);
    border-radius: 5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
</style>
