---
import Default from "../layouts/Default.astro";
import FileGraph from "../components/FileGraph.astro";

const meta = {
    title: "Search",
    description: "Search pages",
    ogTitle: "Search",
    ogDescription: "Search pages",
    ogType: "website",
    ogUrl: "https://vinxis.moe",
    ogSiteName: "VINXIS",
    ogLocale: "en_US",
    ogImage: "https://vinxis.moe/metaImage.png",
    twitterCard: "summary_large_image",
    twitterTitle: "Search",
    twitterDescription: "Search pages",
    twitterImage: "https://vinxis.moe/metaImage.png",
};

import { getCollection } from "astro:content";
import type { PageInfo } from "../utils/pageInfo";

const blog = await getCollection("blog");
const notes = await getCollection("notes");
const posts = await getCollection("posts");

const pages = await Promise.all([...blog, ...notes, ...posts].map(async page => {
    return {
        page,
        render: await page.render(),
    };
}));
pages.sort((a, b) => {
    return new Date(b.render.remarkPluginFrontmatter.created).getTime() - new Date(a.render.remarkPluginFrontmatter.created).getTime();
});

const tagDict: Record<string, number> = {};
pages.forEach(page => {
    page.render.remarkPluginFrontmatter.tags?.forEach((tag: string) => {
        tagDict[tag] = (tagDict[tag] ?? 0) + 1;
    });
});
const tagList = new Set([...Object.entries(tagDict).sort((a, b) => b[1] - a[1]).map(([tag]) => tag)].slice(0, 10));

const pageInfos: PageInfo[] = pages.map(page => {
    return {
        name: `${page.page.collection} - ${"title" in page.page.data && page.page.data.title ? page.page.data.title : page.page.id.replace(/\.[^/\\.]*$/, "")}`,
        slug: page.page.slug,
        collection: page.page.collection,
        internalLinks: [],
    };
});
pageInfos.forEach(pageInfo => {
    const { page } = pages.find(p => p.page.slug === pageInfo.slug)!;
    page.body.replace(/\[\[([^|\]#]+)(?:#[^\]]*)?(?:\|([^\]]+))?\]\]/g, (_, link) => {
        const slug = link.replace(/\p{punct}/gu, "").replace(/ /g, "-").toLowerCase();
        let targetPage = pageInfos.find(target => target.slug === slug); // Find the page it goes to (it may also not exist yet)
        if (!targetPage) {
            targetPage = {
                name: link,
                slug,
                collection: undefined,
                internalLinks: [],
            };
            pageInfos.push(targetPage);
        }
        if (targetPage.slug !== pageInfo.slug)
            pageInfo.internalLinks.push({
                name: targetPage.name,
                slug: `${targetPage.collection}/${targetPage.slug}`,
                collection: targetPage.collection,
            });
        return _;
    });
});
pageInfos.forEach(pageInfo => {
    pageInfo.slug = `${pageInfo.collection}/${pageInfo.slug}`;
});
---
<Default meta={meta}>
    <div class="page search-page">
        <div class="search-section">
            <h1>Search Pages</h1>
            <FileGraph elementStyle="position: absolute; top: 10rem;right: 5rem;" files={pageInfos} />
            <input type="text" id="search" placeholder="Search notes..." autocomplete="off" />
            <div class="page-types">
                <input type="checkbox" id="blog" checked />
                <label for="blog">Blog</label>
                <input type="checkbox" id="notes" checked />
                <label for="notes">Notes</label>
                <input type="checkbox" id="posts" checked />
                <label for="posts">Posts</label>
            </div>
            <input type="text" id="search-tags" placeholder="Search tags..." autocomplete="off" />
            <div class="search-tags-list">
                {
                    [...tagList].map(tag => {
                        return (
                            <div class="search-tag">#{tag}</div>
                        );
                    })
                }
            </div>
        </div>
        <noscript>
            Javascript is required to use search functionality
        </noscript>
        <br>
        <br>
        <div id="search-list">
            {
                pages.map((page) => {
                    return (
                        <a href={page.page.collection + "/" + page.page.slug} style={`color:var(--${page.page.collection}); height:100px;`}>
                            <div style="display:flex; justify-content:space-between; gap:1rem;">
                                <h2>{page.render.remarkPluginFrontmatter.title}</h2>
                                <h2>{page.page.collection}</h2>
                            </div>
                            <div style="display:flex; gap:1rem;">
                                {
                                    page.render.remarkPluginFrontmatter.tags?.map((tag: string) => {
                                        return (<div>#{tag}</div>);
                                    })
                                }
                            </div>
                            <div>
                                <div>Created: {page.render.remarkPluginFrontmatter.created}</div>
                                <div>Last modified: {page.render.remarkPluginFrontmatter.lastModified}</div>
                            </div>
                        </a>
                    );
                })
            }
        </div>
    </div>
    <noscript>
        <style>
            .search-section, .hidden-search-info {
                display: none;
            }
        </style>
    </noscript>
    <span slot="hidden" class="hidden hidden-search-info">Top 10 tags ordered based on frequency</span>
    <span slot="hidden" class="hidden hidden-search-info" style="left:5rem; top:9rem;">Not exactly optimized currently... will improve later</span>
</Default>

<script>
import { getCollection } from "astro:content";
import damerauLevenshteinDistance from "../utils/levenshtein";

document.addEventListener("astro:page-load", async () => {

    const distanceCompare = damerauLevenshteinDistance(1);

    const blog = await getCollection("blog");
    const notes = await getCollection("notes");
    const posts = await getCollection("posts");

    const pages = [...blog, ...notes, ...posts];
    let filteredPages = await Promise.all([...pages].map(async page => {
        return {
            page,
            render: await page.render(),
        };
    }));
    filteredPages.sort((a, b) => {
        return new Date(b.render.remarkPluginFrontmatter.created).getTime() - new Date(a.render.remarkPluginFrontmatter.created).getTime();
    });
    let search = "";
    let searchTags = "";

    async function updateList () {
        filteredPages = await Promise.all(pages.filter(page => {
            if (search.length > 0 && !page.id.replace(/\.md$/, "").split(" ").some((word: string) => distanceCompare(word.toLowerCase(), search))) return false;
            if (searchTags.length > 0 && !page.data.tags?.some((tag: string) => distanceCompare(tag.toLowerCase(), searchTags))) return false;

            if (!(document.getElementById("blog")! as HTMLInputElement).checked && page.collection === "blog") return false;
            if (!(document.getElementById("notes")! as HTMLInputElement).checked && page.collection === "notes") return false;
            if (!(document.getElementById("posts")! as HTMLInputElement).checked && page.collection === "posts") return false;

            return true;
        }).map(async page => {
            return {
                page,
                render: await page.render(),
            };
        }));
        filteredPages.sort((a, b) => {
            return new Date(b.render.remarkPluginFrontmatter.created).getTime() - new Date(a.render.remarkPluginFrontmatter.created).getTime();
        });

        document.getElementById("search-list")!.innerHTML = filteredPages.map(page => {
            return `<a href="${page.page.collection}/${page.page.slug}" style="color:var(--${page.page.collection}); height:100px;">
                <div style="display:flex; justify-content:space-between; gap:1rem;">
                    <h2>${page.render.remarkPluginFrontmatter.title}</h2>
                    <h2>${page.page.collection}</h2>
                </div>
                <div style="display:flex; gap:1rem;">
                    ${[...new Set((page.render.remarkPluginFrontmatter.tags ?? []) as string[])].map((tag: string) => {
        return `<div>#${tag}</div>`;
    }).join("")}
                </div>
                <div>
                    <div>Created: ${page.render.remarkPluginFrontmatter.created}</div>
                    <div>Last modified: ${page.render.remarkPluginFrontmatter.lastModified}</div>
                </div>
            </a>`;
        }).join("");
    }
    document.getElementById("search")!.addEventListener("input", event => {
        search = (event.target as HTMLInputElement).value.toLowerCase();
        updateList().catch(console.error);
    });
    document.getElementById("search")!.addEventListener("click", e => e.stopPropagation());

    ["blog", "notes", "posts"].forEach(type => {
        document.getElementById(type)!.addEventListener("change", () => updateList().catch(console.error));
        document.getElementById(type)!.addEventListener("click", (e) => e.stopPropagation());
    });

    document.getElementById("search-tags")!.addEventListener("input", event => {
        searchTags = (event.target as HTMLInputElement).value.toLowerCase();
        if (searchTags[0] === "#")
            searchTags = searchTags.slice(1);
        
        updateList().catch(console.error);
    });
    document.getElementById("search-tags")!.addEventListener("click", e => e.stopPropagation());

    document.querySelectorAll(".search-tag").forEach(tag => {
        tag.addEventListener("click", event => {
            searchTags = (event.target as HTMLElement).textContent!.slice(1).toLowerCase();
            (document.getElementById("search-tags")! as HTMLInputElement).value = searchTags;
            updateList().catch(console.error);
        });
    });
});
</script>

<style>
.search-page {
    width: fit-content;
}

.search-section {
    width: fit-content;
}

.search-tags-list {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.search-tag {
    cursor: pointer;
    color: var(--secondary);
    text-decoration-color: transparent;
}

.search-tag:hover {
    text-decoration: underline;
    text-decoration-color: initial;
}

#search-list {
    flex: 1;
    display: flex;
    flex-direction: column;
    width: 100%;
    text-transform: capitalize;
}
</style>