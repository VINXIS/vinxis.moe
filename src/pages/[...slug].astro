---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import Default from "../layouts/Default.astro";
import Comments from "../components/Comments.astro";
import FileGraph from "../components/FileGraph.astro";
import TableOfContents from "../components/TableOfContents.astro";
import type { BasePageInfo, PageLink } from "../utils/pageInfo";
import { Image } from "astro:assets";

export const getStaticPaths = (async () => {
    const blog = await getCollection("blog");
    const notes = await getCollection("notes");
    const posts = await getCollection("posts");

    const pages = [...blog, ...notes, ...posts];

    return pages.map(page => {
        // Backlink and forwardlink formatting is slug: /collection/slug, name: collection - data.title or id without extension

        // Getting backlinks
        let backlinks: BasePageInfo[] = [];
        if (page.collection === "notes") { // These will only exist for notes
            pages.forEach(targetPage => {
                if (targetPage.slug === page.slug)
                    return;

                // Regex matching for internal/wikilinks
                targetPage.body.replace(/\[\[([^|\]#]+)(?:#[^\]]*)?(?:\|([^\]]+))?\]\]/g, (_, link) => {
                    const slug = link.replace(/\p{punct}/gu, "").replace(/ /g, "-").toLowerCase();
                    if (slug === page.slug)
                        backlinks.push({
                            slug: `/${targetPage.collection}/${targetPage.slug}`,
                            name: `${targetPage.collection} - ${"title" in targetPage.data && targetPage.data.title ? targetPage.data.title : targetPage.id.replace(/\.[^/\\.]*$/, "")}`,
                            collection: targetPage.collection,
                        });
                    return _;
                });
            });
            backlinks = backlinks.filter((backlink, index, self) => self.findIndex(t => t.slug === backlink.slug) === index);
        }

        let forwardlinks: PageLink[] = [];
        // Regex matching for internal/wikilinks
        page.body.replace(/\[\[([^|\]#]+)(?:#[^\]]*)?(?:\|([^\]]+))?\]\]/g, (_, link) => {
            const slug = link.replace(/\p{punct}/gu, "").replace(/ /g, "-").toLowerCase();
            const targetPage = pages.find(target => target.slug === slug); // Find the page it goes to (it may also not exist yet)
            if (!targetPage || targetPage.slug !== page.slug)
                forwardlinks.push({
                    slug: `/${targetPage?.collection}/${slug}`,
                    name: targetPage ? `${targetPage.collection} - ${"title" in targetPage.data && targetPage.data.title ? targetPage.data.title : targetPage.id.replace(/\.[^/\\.]*$/, "")}` : link,
                    collection: targetPage?.collection,
                });
            return _;
        });
        forwardlinks = forwardlinks.filter((forwardlink, index, self) => self.findIndex(t => t.slug === forwardlink.slug) === index);

        return {
            params: {
                slug: `/${page.collection}/${page.slug}`,
            },
            props: {
                title: `${page.collection} - ${"title" in page.data && page.data.title ? page.data.title : page.id.replace(/\.[^/\\.]*$/, "")}`,
                page,
                backlinks,
                forwardlinks,
            },
        };
    });
}) satisfies GetStaticPaths;

const { page, title, backlinks, forwardlinks } = Astro.props;

const render = await page.render();
const { headings, Content } = render;
const description = page.body.slice(0, 99) + "…";

const meta = {
    title, 
    description,
    ogTitle: title,
    ogDescription: description,
    ogType: "website",
    ogUrl: "https://vinxis.moe",
    ogSiteName: title,
    ogLocale: "en_US",
    ogImage: "image" in page.data && page.data.image ? `${Astro.site?.toString().replace(/\/$/g, "") ?? "https://vinxis.moe"}${page.data.image.src}?${Math.round(Math.random() * 1000000)}` : "https://vinxis.moe/metaImage.png",
    twitterCard: "summary_large_image",
    twitterTitle: title,
    twitterDescription: description,
    twitterImage: "image" in page.data && page.data.image ? `${Astro.site?.toString().replace(/\/$/g, "") ?? "https://vinxis.moe"}${page.data.image.src}?${Math.round(Math.random() * 1000000)}` : "https://vinxis.moe/metaImage.png",
};
---
<link href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css" rel="stylesheet">
<Default meta={meta}>
    <div class="page post-page">
        <h1>{title}</h1>
        <h2>Created: {render.remarkPluginFrontmatter.created}</h2>
        {render.remarkPluginFrontmatter.lastModified && (<h2>Last Modified: {render.remarkPluginFrontmatter.lastModified}</h2>)}
        {"image" in page.data && page.data.image && (<Image src={page.data.image} alt={page.data.imageAlt} class="post-headerImage"/>)}
        <TableOfContents headings={headings} />
        <Content />
        <br>
        <br>
        { 
            backlinks.length > 0 &&
            <div>
                <h2>Pages referencing this page:</h2>
                <div class="post-backlinks">
                    {backlinks.map(backlink => (
                        <a class="post-backlink" href={backlink.slug}>{backlink.name}</a>
                    ))}
                </div>
            </div>
        }
        { page.collection !== "notes" && (<Comments />)}
    </div>
    <FileGraph elementStyle="position: absolute; top:10rem; right:5rem;" centralFile={{slug: page.slug, name: title }} backlinks={backlinks} forwardlinks={forwardlinks} />
    <button id="back-to-top" aria-label="Back to top">
        Back to top ↑
    </button>
</Default>

<script>
document.addEventListener("astro:page-load", () => {
    const backToTopButton = document.getElementById("back-to-top");
    if (!backToTopButton)
        return;
    
    backToTopButton.addEventListener("click", () => {
        window.scrollTo({
            top: 0,
            behavior: "smooth",
        });
        backToTopButton.blur();
    });
  
    // Show/hide the button based on scroll position
    function toggleBackToTopButton () {
        if (window.scrollY > 300) // Arbitrary value for button showing
            backToTopButton!.classList.add("visible");
        else
            backToTopButton!.classList.remove("visible");
    }
    window.addEventListener("scroll", toggleBackToTopButton);
  
    // Initial check
    toggleBackToTopButton();

    // For any images in the post, add a click event to open them in a new tab
    const images = document.querySelectorAll(".post-page img, .post-page p img");
    images.forEach(image => {
        image.addEventListener("click", () => {
            const src = image.getAttribute("src");
            if (src)
                window.open(src, "_blank");
        });
    });
});
</script>

<style>
    .post-page {
        position: relative;
        min-width: 250px;
        @media (min-width: 860px) { /* Width of the page will become the minimum allowed (250px) */
            width: calc(100% - 10rem - 450px);
        }
    }

    .post-page, .post-page :global(details) {
        display: flex;
        flex-direction: column;
        gap: 2ch;
    }

    .post-page h1, .post-backlink {
        text-transform: capitalize;
    }

    .post-page :global(p:has(img)) {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
    }

    .post-page img, .post-page :global(p img) {
        max-width: 33%;
        cursor: pointer;
        height: auto;
    }

    .post-headerImage {
        max-width: 100% !important;
    }

    .post-backlinks {
        display: flex;
        flex-direction: column;
        width: fit-content;
    }

    #back-to-top {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s, visibility 0.3s;
        z-index: 1000;
    }

    #back-to-top.visible {
        opacity: 0.7;
        visibility: visible;
    }
    
    #back-to-top:hover {
        opacity: 1;
    }
</style>
