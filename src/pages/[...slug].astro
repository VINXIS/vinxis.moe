---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import Default from "../layouts/Default.astro";
import FileGraph from "../components/FileGraph.astro";
import type { BasePageInfo, PageLink } from "../utils/pageInfo";

export const getStaticPaths = (async () => {
    const blog = await getCollection("blog");
    const notes = await getCollection("notes");
    const posts = await getCollection("posts");

    const pages = [...blog, ...notes, ...posts];

    return pages.map(page => {
        // Backlink and forwardlink formatting is slug: /collection/slug, name: collection - data.title or id without extension

        // Getting backlinks
        let backlinks: BasePageInfo[] = [];
        if (page.collection === "notes") { // These will only exist for notes
            pages.forEach(targetPage => {
                if (targetPage.slug === page.slug)
                    return;

                // Regex matching for internal/wikilinks
                targetPage.body.replace(/\[\[([^|\]#]+)(?:#[^\]]*)?(?:\|([^\]]+))?\]\]/g, (_, link) => {
                    const slug = link.replace(/\p{punct}/gu, "").replace(/ /g, "-").toLowerCase();
                    if (slug === page.slug)
                        backlinks.push({
                            slug: `/${targetPage.collection}/${targetPage.slug}`,
                            name: `${targetPage.collection} - ${"title" in targetPage.data && targetPage.data.title ? targetPage.data.title : targetPage.id.replace(/\.[^/\\.]*$/, "")}`,
                            collection: targetPage.collection,
                        });
                    return _;
                });
            });
            backlinks = backlinks.filter((backlink, index, self) => self.findIndex(t => t.slug === backlink.slug) === index);
        }

        let forwardlinks: PageLink[] = [];
        // Regex matching for internal/wikilinks
        page.body.replace(/\[\[([^|\]#]+)(?:#[^\]]*)?(?:\|([^\]]+))?\]\]/g, (_, link) => {
            const slug = link.replace(/\p{punct}/gu, "").replace(/ /g, "-").toLowerCase();
            const targetPage = pages.find(target => target.slug === slug); // Find the page it goes to (it may also not exist yet)
            if (!targetPage || targetPage.slug !== page.slug)
                forwardlinks.push({
                    slug: `/${targetPage?.collection}/${slug}`,
                    name: targetPage ? `${targetPage.collection} - ${"title" in targetPage.data && targetPage.data.title ? targetPage.data.title : targetPage.id.replace(/\.[^/\\.]*$/, "")}` : link,
                    collection: targetPage?.collection,
                });
            return _;
        });
        forwardlinks = forwardlinks.filter((forwardlink, index, self) => self.findIndex(t => t.slug === forwardlink.slug) === index);

        return {
            params: {
                slug: `/${page.collection}/${page.slug}`,
            },
            props: {
                title: `${page.collection} - ${"title" in page.data && page.data.title ? page.data.title : page.id.replace(/\.[^/\\.]*$/, "")}`,
                page,
                backlinks,
                forwardlinks,
            },
        };
    });
}) satisfies GetStaticPaths;

const { page, title, backlinks, forwardlinks } = Astro.props;

const { Content } = await page.render();
const description = page.body.slice(0, 99) + "â€¦";

const meta = {
    title, 
    description,
    ogTitle: title,
    ogDescription: description,
    ogType: "website",
    ogUrl: "https://vinxis.moe",
    ogSiteName: title,
    ogLocale: "en_US",
    ogImage: "https://vinxis.moe/metaImage.png",
    twitterCard: "summary_large_image",
    twitterTitle: title,
    twitterDescription: description,
    twitterImage: "https://vinxis.moe/metaImage.png",
};
---
<link href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css" rel="stylesheet">
<Default meta={meta}>
    <div class="page post-page">
        <h1>{title}</h1>
        <Content />
        <br>
        <br>
        { 
            backlinks.length > 0 &&
            <div>
                <h2>Pages referencing this page:</h2>
                <div class="post-backlinks">
                    {backlinks.map(backlink => (
                        <a class="post-backlink" href={backlink.slug}>{backlink.name}</a>
                    ))}
                </div>
            </div>
        }
    </div>
    <FileGraph elementStyle="position: absolute; top:10rem; right:5rem;" centralFile={{slug: page.slug, name: title }} backlinks={backlinks} forwardlinks={forwardlinks} />
</Default>

<style>

    .post-page {
        position: relative;
        min-width: 250px;
        @media (min-width: 860px) { /* Width of the page will become the minimum allowed (250px) */
            width: calc(100% - 10rem - 450px);
        }
    }

    .post-page h1, .post-backlink {
        text-transform: capitalize;
    }

    .post-backlinks {
        display: flex;
        flex-direction: column;
        width: fit-content;
    }
</style>